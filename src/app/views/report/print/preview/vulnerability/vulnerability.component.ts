import {AfterViewInit, Component, OnInit} from '@angular/core';
import {DashboardService} from '../../../../../services';
import {ActivatedRoute} from '@angular/router';
import {Localization} from '../../../../../localization';

@Component({
  selector: 'app-vulnerability',
  templateUrl: './vulnerability.component.html',
  styleUrls: ['../styles.scss', './vulnerability.component.scss']
})
export class VulnerabilityComponent implements OnInit, AfterViewInit {

  gte = '';
  lte = '';
  countAll = 0;
  countCritical = 0;
  countPerHosts = [];
  countPerVulnHosts = [];
  countPerVulnPorts = [];
  countPerVulnThreats = [];
  countPerVulnNVTs = [];
  countPerCVEs = [];
  countPerVulnNames = [];
  localization = Localization.instance;

  constructor(
    private dashboardService: DashboardService,
    private route: ActivatedRoute) {
    this.route.queryParams.subscribe(params => {
      this.gte = params['gte'];
      this.lte = params['lte'];
    });
  }

  ngOnInit() {
  }
  ngAfterViewInit() {
    this.load();
    window.print();
  }
  load() {
    // 위험항목 : 전체
    this.dashboardService.countAll(this.gte, this.lte, result => {
      this.countAll = result.data.count;
    });
    // 위험항목 : 치명적
    this.dashboardService.countCritical(this.gte, this.lte, result => {
      this.countCritical = result.data.count;
    });
    // 호스트 별 취약점 개수
    this.dashboardService.countPerHost(this.gte, this.lte, result => {
      for (let i = 0; i < result.data.length; i++) {
        const item = {};
        item[Localization.pick('호스트')] = result.data[i].key;
        item[Localization.pick('개수')] = result.data[i].doc_count;
        this.countPerHosts.push(item);
      }
    });
    //  타겟 별 취약점 개수
    this.dashboardService.countPerVulnHost(this.gte, this.lte, result => {
      for (let i = 0; i < result.data.length; i++) {
        const item = {};
        item[Localization.pick('취약 타겟')] = result.data[i].key;
        item[Localization.pick('개수')] = result.data[i].doc_count;
        this.countPerVulnHosts.push(item);
      }
    });
    // 포트 별 취약점 개수
    this.dashboardService.countPerVulnPort(this.gte, this.lte, result => {
      for (let i = 0; i < result.data.length; i++) {
        const item = {};
        item[Localization.pick('취약 포트')] = result.data[i].key;
        item[Localization.pick('개수')] = result.data[i].doc_count;
        this.countPerVulnPorts.push(item);
      }
    });
    // 등급 별 취약점 개수
    this.dashboardService.countPerVulnThreat(this.gte, this.lte, result => {
      for (let i = 0; i < result.data.length; i++) {
        const item = {};
        item[Localization.pick('취약점 등급')] = result.data[i].key;
        item[Localization.pick('개수')] = result.data[i].doc_count;
        this.countPerVulnThreats.push(item);
      }
    });
    // NVT 별 취약점 개수
    this.dashboardService.countPerVulnNVT(this.gte, this.lte, result => {
      for (let i = 0; i < result.data.length; i++) {
        const item = {};
        item[Localization.pick('NVT 그룹')] = result.data[i].key;
        item[Localization.pick('개수')] = result.data[i].doc_count;
        this.countPerVulnNVTs.push(item);
      }
    });
    // CVE 별 취약점 개수
    this.dashboardService.countPerCVE(this.gte, this.lte, result => {
      for (let i = 0; i < result.data.length; i++) {
        const item = {};
        item[Localization.pick('CVE')] = result.data[i].key;
        item[Localization.pick('개수')] = result.data[i].doc_count;
        this.countPerCVEs.push(item);
      }
    });
    // 취약점 이름 별 개수
    this.dashboardService.countPerVulnName(this.gte, this.lte, result => {
      for (let i = 0; i < result.data.length; i++) {
        const item = {};
        item[Localization.pick('취약점 이름')] = result.data[i].key;
        item[Localization.pick('개수')] = result.data[i].doc_count;
        this.countPerVulnNames.push(item);
      }
    });
  }

}
