import {AfterViewInit, Component, OnInit, ViewChild} from '@angular/core';
import {DashboardService} from '../../../services';
import {Common, Excel} from '../../../utils';
import {DatePeriodComponent} from '../../../components/date-period/date-period.component';
import {Localization} from '../../../localization';


@Component({
  selector: 'app-vulnerability',
  templateUrl: './vulnerability.component.html',
  styleUrls: ['./vulnerability.component.scss']
})
export class VulnerabilityComponent implements OnInit, AfterViewInit {

  /**
   * 엑셀 제어
   */
  Excel = Excel;

  @ViewChild('dateperiod')
  datePeriod: DatePeriodComponent;
  gte = '';
  lte = '';
  countAll = 0;
  countCritical = 0;
  countPerHosts = [];
  countPerVulnHosts = [];
  countPerVulnPorts = [];
  countPerVulnThreats = [];
  countPerVulnNVTs = [];
  countPerCVEs = [];
  countPerVulnNames = [];
  localization = Localization.instance;
  constructor(
    private dashboardService: DashboardService) {
  }

  ngOnInit() {}
  ngAfterViewInit() {
    this.load();
    setInterval(() => {
        this.load();
      },
      36000000);
  }
  load() {
    this.gte = this.datePeriod.startDate.getFullYear() + '-' + Common.pad(this.datePeriod.startDate.getMonth() + 1, 2) + '-' + Common.pad(this.datePeriod.startDate.getDate(), 2);
    this.lte = this.datePeriod.endDate.getFullYear() + '-' + Common.pad(this.datePeriod.endDate.getMonth() + 1, 2) + '-' + Common.pad(this.datePeriod.endDate.getDate(), 2);
    console.log(this.gte);
    // 위험항목 : 전체
    this.dashboardService.countAll(this.gte, this.lte, result => {
      this.countAll = result.data.count;
    });
    // 위험항목 : 치명적
    this.dashboardService.countCritical(this.gte, this.lte, result => {
      this.countCritical = result.data.count;
    });

    // 초기화
    this.countPerHosts = [];
    this.countPerVulnHosts = [];
    this.countPerVulnPorts = [];
    this.countPerVulnThreats = [];
    this.countPerVulnNVTs = [];
    this.countPerCVEs = [];
    this.countPerVulnNames = [];

    // 호스트 별 취약점 개수
    this.dashboardService.countPerHost(this.gte, this.lte, result => {
      for (let i = 0; i < result.data.length; i++) {
        const item = {};
        item[Localization.pick('호스트')] = result.data[i].key;
        item[Localization.pick('개수')] = result.data[i].doc_count;
        this.countPerHosts.push(item);
      }
    });
    //  타겟 별 취약점 개수
    this.dashboardService.countPerVulnHost(this.gte, this.lte, result => {
      for (let i = 0; i < result.data.length; i++) {
        const item = {};
        item[Localization.pick('취약 타겟')] = result.data[i].key;
        item[Localization.pick('개수')] = result.data[i].doc_count;
        this.countPerVulnHosts.push(item);
      }
    });
    // 포트 별 취약점 개수
    this.dashboardService.countPerVulnPort(this.gte, this.lte, result => {
      for (let i = 0; i < result.data.length; i++) {
        const item = {};
        item[Localization.pick('취약 포트')] = result.data[i].key;
        item[Localization.pick('개수')] = result.data[i].doc_count;
        this.countPerVulnPorts.push(item);
      }
    });
    // 등급 별 취약점 개수
    this.dashboardService.countPerVulnThreat(this.gte, this.lte, result => {
      for (let i = 0; i < result.data.length; i++) {
        const item = {};
        item[Localization.pick('취약점 등급')] = result.data[i].key;
        item[Localization.pick('개수')] = result.data[i].doc_count;
        this.countPerVulnThreats.push(item);
      }
    });
    // NVT 별 취약점 개수
    this.dashboardService.countPerVulnNVT(this.gte, this.lte, result => {
      for (let i = 0; i < result.data.length; i++) {
        const item = {};
        item[Localization.pick('NVT 그룹')] = result.data[i].key;
        item[Localization.pick('개수')] = result.data[i].doc_count;
        this.countPerVulnNVTs.push(item);
      }
    });
    // CVE 별 취약점 개수
    this.dashboardService.countPerCVE(this.gte, this.lte, result => {
      for (let i = 0; i < result.data.length; i++) {
        const item = {};
        item[Localization.pick('CVE')] = result.data[i].key;
        item[Localization.pick('개수')] = result.data[i].doc_count;
        this.countPerCVEs.push(item);
      }
    });
    // 취약점 이름 별 개수
    this.dashboardService.countPerVulnName(this.gte, this.lte, result => {
      for (let i = 0; i < result.data.length; i++) {
        const item = {};
        item[Localization.pick('취약점 이름')] = result.data[i].key;
        item[Localization.pick('개수')] = result.data[i].doc_count;
        this.countPerVulnNames.push(item);
      }
    });
  }
  /**
   * 기간 검색 버튼 이벤트 핸들러
   * @param dates
   */
  onSearch(dates: { startDate: Date, endDate: Date }) {
    this.load();
  }

}
